#
# generated by mrClientMaker ((c)Lorenzo Pierfederici <lpierfederici@gmail.com>)
#
"""Standalone SPAM client"""

import getpass, cookielib, urllib, urllib2, json
import project, scene, shot


class Category(object):
    def __init__(self, client):
        self.client = client
    
    
    def get(self, name):
        """This method is currently unused, but is needed for the 
        RESTController to work."""
        data = encode_params(locals(), )
        
        result = self.client.open('category', data)
        return json.loads(result.read())['category']

    
    def new(self, category_id, ordering=0, naming_convention=):
        """Create a new category"""
        data = encode_params(locals(), )
        
        return self.client.open('category', data)

    
    def edit(self, category_id, ordering=0, naming_convention=):
        """Edit a category"""
        data = encode_params(locals(), _method=PUT)
        
        return self.client.open('category', data)

    
    def delete(self, category_id):
        """Delete a category.
        
        Only delete the category record from the common db, all the assets
        in this category will be orphaned, and must be removed manually.
        """
        data = encode_params(locals(), _method=DELETE)
        
        return self.client.open('category', data)



class Project(object):
    def __init__(self, client):
        self.client = client
    
    
    def get(self, proj):
        """Return a `tabbed` page for project tabs."""
        data = encode_params(locals(), )
        
        result = self.client.open('project', data)
        return json.loads(result.read())['project']

    
    def new(self, proj, name=None, description=None):
        """Create a new project"""
        data = encode_params(locals(), )
        
        return self.client.open('project', data)

    
    def edit(self, proj, name=None, description=None):
        """Edit a project"""
        data = encode_params(locals(), _method=PUT)
        
        return self.client.open('project', data)

    
    def delete(self, proj):
        """Delete a project.
        
        Only delete the project record from the common db, the project
        repository must be removed manually.
        (This should help prevent awful accidents) ;)
        """
        data = encode_params(locals(), _method=DELETE)
        
        return self.client.open('project', data)

    
    def archive(self, proj):
        """Archive a project"""
        data = encode_params(locals(), _method=ARCHIVE)
        
        return self.client.open('project', data)

    
    def activate(self, proj):
        """Activate a project"""
        data = encode_params(locals(), _method=ACTIVATE)
        
        return self.client.open('project', data)



class Shot(object):
    def __init__(self, client):
        self.client = client
    
    
    def get(self, proj, sc, sh):
        """Return a `tabbed` page for shot tabs."""
        data = encode_params(locals(), )
        
        result = self.client.open('shot', data)
        return json.loads(result.read())['shot']

    
    def new(self, proj, sc, sh, description=None, action=None, frames=0, handle_in=0, handle_out=0):
        """Create a new shot"""
        data = encode_params(locals(), )
        
        return self.client.open('shot', data)

    
    def edit(self, proj, sc, sh, description=None, action=None, frames=0, handle_in=0, handle_out=0):
        """Edit a shot"""
        data = encode_params(locals(), _method=PUT)
        
        return self.client.open('shot', data)

    
    def delete(self, proj, sc, sh):
        """Delete a shot.
        
        Only delete the shot record from the db, the shot directories must be
        removed manually.
        (This should help prevent awful accidents) ;)
        """
        data = encode_params(locals(), _method=DELETE)
        
        return self.client.open('shot', data)



class Libgroup(object):
    def __init__(self, client):
        self.client = client
    
    
    def get(self, proj, libgroup_id):
        """Return a `tabbed` page for libgroup tabs."""
        data = encode_params(locals(), )
        
        result = self.client.open('libgroup', data)
        return json.loads(result.read())['libgroup']

    
    def new(self, proj, parent_id, name, description=None):
        """Create a new libgroup"""
        data = encode_params(locals(), )
        
        return self.client.open('libgroup', data)

    
    def edit(self, proj, libgroup_id, description=None):
        """Edit a libgroup"""
        data = encode_params(locals(), _method=PUT)
        
        return self.client.open('libgroup', data)

    
    def delete(self, proj, libgroup_id):
        """Delete a libgroup.
        
        Only delete the libgroup record from the db, the scene directories must
        be removed manually.
        (This should help prevent awful accidents) ;)
        """
        data = encode_params(locals(), _method=DELETE)
        
        return self.client.open('libgroup', data)



class Scene(object):
    def __init__(self, client):
        self.client = client
    
    
    def get(self, proj, sc):
        """Return a `tabbed` page for scene tabs."""
        data = encode_params(locals(), )
        
        result = self.client.open('scene', data)
        return json.loads(result.read())['scene']

    
    def new(self, proj, sc, description=None):
        """Create a new scene"""
        data = encode_params(locals(), )
        
        return self.client.open('scene', data)

    
    def edit(self, proj, sc, description=None):
        """Edit a scene"""
        data = encode_params(locals(), _method=PUT)
        
        return self.client.open('scene', data)

    
    def delete(self, proj, sc):
        """Delete a scene.
        
        Only delete the scene record from the db, the scene directories must be
        removed manually.
        (This should help prevent awful accidents) ;)
        """
        data = encode_params(locals(), _method=DELETE)
        
        return self.client.open('scene', data)



class Note(object):
    def __init__(self, client):
        self.client = client
    
    
    def get(self, annotable_id, note_id):
        """This method is currently unused, but is needed for the 
        RESTController to work."""
        data = encode_params(locals(), )
        
        result = self.client.open('note', data)
        return json.loads(result.read())['note']

    
    def new(self, annotable_id, text):
        """Add notes to a ``annotable`` obect."""
        data = encode_params(locals(), )
        
        return self.client.open('note', data)

    
    def delete(self, note_id):
        """Delete a note."""
        data = encode_params(locals(), _method=DELETE)
        
        return self.client.open('note', data)

    
    def pin(self, note_id):
        """Pin a note."""
        data = encode_params(locals(), _method=PIN)
        
        return self.client.open('note', data)

    
    def unpin(self, note_id):
        """Un-pin a note."""
        data = encode_params(locals(), _method=UNPIN)
        
        return self.client.open('note', data)



class Tag(object):
    def __init__(self, client):
        self.client = client
    
    
    def get(self, taggable_id, tag_id):
        """This method is currently unused, but is needed for the 
        RESTController to work."""
        data = encode_params(locals(), )
        
        result = self.client.open('tag', data)
        return json.loads(result.read())['tag']

    
    def new(self, taggable_id, tag_ids=[], new_tags=None):
        """Add tags to a ``taggable`` obect."""
        data = encode_params(locals(), )
        
        return self.client.open('tag', data)

    
    def delete(self, tag_id):
        """Delete a tag."""
        data = encode_params(locals(), _method=DELETE)
        
        return self.client.open('tag', data)

    
    def remove(self, taggable_id, tag_ids=[]):
        """Delete a tag."""
        data = encode_params(locals(), _method=REMOVE)
        
        return self.client.open('tag', data)



class Asset(object):
    def __init__(self, client):
        self.client = client
    
    
    def get(self, proj, asset_id):
        """Return a `standalone` page with the asset history"""
        data = encode_params(locals(), )
        
        result = self.client.open('asset', data)
        return json.loads(result.read())['asset']

    
    def new(self, proj, container_type, container_id, category_id, name, comment=):
        """Create a new asset"""
        data = encode_params(locals(), )
        
        return self.client.open('asset', data)

    
    def delete(self, proj, asset_id):
        """Delete an asset.
        
        Only delete the asset record from the db, the asset file(s) must be
        removed manually.
        (This should help prevent awful accidents) ;)
        """
        data = encode_params(locals(), _method=DELETE)
        
        return self.client.open('asset', data)

    
    def checkout(self, proj, asset_id):
        """Checkout an asset.
        
        The asset will be blocked and only the current owner will be able to
        publish new versions until it is released.
        """
        data = encode_params(locals(), _method=CHECKOUT)
        
        return self.client.open('asset', data)

    
    def release(self, proj, asset_id):
        """Release an asset.
        
        The asset will be unblocked and available for other users to checkout.
        """
        data = encode_params(locals(), _method=RELEASE)
        
        return self.client.open('asset', data)

    
    def publish(self, proj, asset_id, uploaded, comment=):
        """Publish a new version of an asset.
        
        This will commit to the repo the file(s) already uploaded in a temporary
        storage area, and create a thumbnail and preview if required.
        """
        data = encode_params(locals(), _method=PUBLISH)
        
        return self.client.open('asset', data)

    
    def submit(self, proj, asset_id, comment=):
        """Submit an asset to supervisors for approval."""
        data = encode_params(locals(), _method=SUBMIT)
        
        return self.client.open('asset', data)

    
    def recall(self, proj, asset_id, comment=):
        """Recall an asset submitted for approval."""
        data = encode_params(locals(), _method=RECALL)
        
        return self.client.open('asset', data)

    
    def sendback(self, proj, asset_id, comment=):
        """Send back an asset for revision."""
        data = encode_params(locals(), _method=SENDBACK)
        
        return self.client.open('asset', data)

    
    def approve(self, proj, asset_id, comment=):
        """Approve an asset submitted for approval."""
        data = encode_params(locals(), _method=APPROVE)
        
        return self.client.open('asset', data)

    
    def revoke(self, proj, asset_id, comment=):
        """Revoke approval for an asset."""
        data = encode_params(locals(), _method=REVOKE)
        
        return self.client.open('asset', data)



class Client(object):
    """Standalone SPAM client."""
    
    def __init__(self, url):
        self.url = url.rstrip('/')
        
        self.category = Category(self)
        self.project = Project(self)
        self.shot = Shot(self)
        self.libgroup = Libgroup(self)
        self.scene = Scene(self)
        self.note = Note(self)
        self.tag = Tag(self)
        self.asset = Asset(self)
            
    def login(self, username, password=None):
        """Login in SPAM, and save an access cookie for subsequent commands.
        
        :Parameters:
            username : string
                your username
            password : string
                your password, if no password is given it will be asked at the
                command line
        """
        self.username = username
        if not password:
            password = getpass.getpass()
        credentials = urllib.urlencode(dict(login=username, password=password))
        cj = cookielib.CookieJar()
        self.opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
        url = '%s/login_handler?__logins=0&came_from=/' % self.url
        self.opener.open(url, credentials)
    
    def open(self, cmd, data=None):
        """Open a SPAM url using the builtin opener.
        
        You should not use "open" directly, use wrapped methods instead.

        :Parameters:
            cmd: string
                Command url without prefix (eg: '/project')
            data: string
                urlencoded POST data
        
        :Returns:
            a file-like object with the http response
        """
        return self.opener.open('%s/%s' % (self.url, cmd.lstrip('/')), data)






